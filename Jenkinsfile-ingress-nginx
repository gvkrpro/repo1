def tag_name="v${env.BUILD_NUMBER}"
pipeline{
agent any

environment{
	MAVEN_OPTS="-Xmx512m"
	AWS_CREDS = credentials('aws-credentials')
	AWS_ACCESS_KEY_ID     = "${env.AWS_CREDS_USR}" 
	AWS_SECRET_ACCESS_KEY = "${env.AWS_CREDS_PSW}"
	AWS_DEFAULT_REGION = "ap-south-1"
}

stages{
	stage("Cleaning Workspace"){
		steps{
      sh '''
      echo "Cleaning Workspace"
      rm -rf ${WORKSPACE}/target
      docker rmi --no-prune $(docker images -q) || true
      
      '''
			}
		}
	stage("Compile"){
		steps{
			dir('TestWebApp'){
				echo "Compiling ${AWS_ACCESS_KEY_ID}"
			sh "mvn compile"
			}
		}
	}
	stage("Testing"){
		steps{
			dir('TestWebApp'){
			echo "Running Test Cases"
			sh "mvn test"
			}
		}
	}
/*	
  stage("Static Code Analysis"){
		steps{
		   withSonarQubeEnv('Sonarqube') {
			withCredentials([string(credentialsId: 'My-sonar-token', variable: 'TOKEN')]) {
			dir('TestWebApp'){
			echo "Sending Test reports to SonarQube"
				sh "mvn sonar:sonar -Dsonar.host.url=http://3.110.218.66:31485/ -Dsonar.login=${TOKEN} -X "
					}
				}
			}
		}
	}
*/  
	stage("Packaging"){
		steps{
			dir('TestWebApp'){
			echo "Generatating Artifact"
			sh "mvn package"
			}
		}
	}
  stage("Deploy to Nexus"){
		steps{
			//withCredentials([usernamePassword(credentialsId: 'Nexus-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			dir('TestWebApp'){
			echo "Deploying Artifact to Nexus"
			sh "mvn deploy -Dserver.username='admin' -Dserver.password='admin' -s settings.xml"
			//}
		}
	}
  }
  
	stage('Build Docker Image') { 
            steps { 
                script{
                 app = docker.build("gvkr1409/testwebapp-1","./")
                }
            }
        }
	
	stage('Push Docker Image') {
            steps {
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                    app.push(tag_name)
                    app.push("latest")
                    }
                }
            }
        }
	stage("Load KubeConfig"){
		steps{
			sh '''
				aws eks update-kubeconfig --name gvkrsoltuions
				kubectl cluster-info
			'''
		}
	}
	
	stage("Deploy to EKS-nginx-Ingress"){
		steps{
			script{
				sh '''
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/1.22/deploy.yaml || true
sed -i 's/latest/"$tag_name"/g' deployment.yaml
cat deployment.yaml
kubectl apply -f deployment.yaml || true
kubectl get services
kubectl get pods

kubectl apply -f nginx-ingress-deploy.yaml || true
kubectl get ingress
'''
			}
		}
	}
}
post{
	success{
		archiveArtifacts 'TestWebApp/target/*.war'
	}
}

}
