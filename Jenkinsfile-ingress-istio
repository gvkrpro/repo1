pipeline{
agent any

environment{
	MAVEN_OPTS="-Xmx512m"
	AWS_CREDS = credentials('aws-credentials')
	AWS_ACCESS_KEY_ID     = "${env.AWS_CREDS_USR}" 
	AWS_SECRET_ACCESS_KEY = "${env.AWS_CREDS_PSW}"
	AWS_DEFAULT_REGION = "ap-south-1"
}

stages{
	stage("Compile"){
		steps{
			dir('TestWebApp'){
				echo "Compiling ${AWS_ACCESS_KEY_ID}"
			sh "mvn compile"
			}
		}
	}
	stage("Testing"){
		steps{
			dir('TestWebApp'){
			echo "Running Test Cases"
			sh "mvn test"
			}
		}
	}
/*	
  stage("Static Code Analysis"){
		steps{
		   withSonarQubeEnv('Sonarqube') {
			withCredentials([string(credentialsId: 'My-sonar-token', variable: 'TOKEN')]) {
			dir('TestWebApp'){
			echo "Sending Test reports to SonarQube"
				sh "mvn sonar:sonar -Dsonar.host.url=http://3.110.218.66:31485/ -Dsonar.login=${TOKEN} -X "
					}
				}
			}
		}
	}
*/  
	stage("Packaging"){
		steps{
			dir('TestWebApp'){
			echo "Generatating Artifact"
			sh "mvn package"
			}
		}
	}
  stage("Deploy to Nexus"){
		steps{
			//withCredentials([usernamePassword(credentialsId: 'Nexus-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			dir('TestWebApp'){
			echo "Deploying Artifact to Nexus"
			sh "mvn deploy -Dserver.username='admin' -Dserver.password='admin' -s settings.xml"
			//}
		}
	}
  }
  
	stage('Build Docker Image') { 
            steps { 
                script{
                 app = docker.build("gvkr1409/testwebapp","./")
                }
            }
        }
	
	stage('Push Docker Image') {
            steps {
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                    app.push("${env.BUILD_NUMBER}")
                    app.push("latest")
                    }
                }
            }
        }
	stage("install kubectl"){
		steps{
			sh '''
				curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
				chmod +x ./kubectl
				mkdir -p k8s/bin || echo "folder k8s is available"
				mv kubectl k8s/bin/
				cd k8s/
				export PATH=$PWD/bin:$PATH
				aws eks update-kubeconfig --name gvkrsoltuions
				kubectl cluster-info
			'''
		}
	}
	
	stage("install ISTIO"){
		steps{
			sh '''
curl -L https://istio.io/downloadIstio | sh -
cd istio-1.14.3
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo -y
cd ..
alias kubectl=k8s/bin/kubectl
kubectl label namespace default istio-injection=enabled || true
			'''
		}
	}			
	stage("Deploy to EKS-ISTIO-Ingress"){
		steps{
				sh '''
cd istio-1.14.3
export PATH=$PWD/bin:$PATH
alias kubectl=k8s/bin/kubectl
kubectl apply -f deployment-test-ingress.yaml || true
kubectl get services
kubectl get pods

kubectl apply -f deployment-test-ingress-gateway.yaml || true

istioctl analyze

kubectl get svc istio-ingressgateway -n istio-system

export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL"			
'''
		}
	}
}
post{
	success{
		archiveArtifacts 'TestWebApp/target/*.war'
	}
}

}
