pipeline {
    agent any

    environment {
        GCP_PROJECT_ID = "<your-gcp-project-id>"
        GCP_REGION = "<your-gcp-region>"
        SERVICE_ACCOUNT_KEY_CREDENTIAL_ID = "<your-jenkins-credential-id>"
    }

    stages {
        stage('Terraform Init') {
            steps {
                script {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${SERVICE_ACCOUNT_KEY_CREDENTIAL_ID}", variable: 'SERVICE_ACCOUNT_KEY_PATH')]) {
                        sh "export GOOGLE_APPLICATION_CREDENTIALS=${SERVICE_ACCOUNT_KEY_PATH}"
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up resources or perform any other post-processing steps
            script {
                sh 'terraform destroy -auto-approve'
            }
        }
    }
}
##########################################################################################################################

#Certainly! If you're switching from impersonation to service account key-based authorization in your Terraform code, you need to make some adjustments. Here's an example of how you can modify your Terraform code to use a service account key instead of impersonation:

provider "google" {
  credentials = file(var.service_account_key_file_path)
  project     = var.gcp_project_id
  region      = var.gcp_region
}

resource "google_service_account" "example_service_account" {
  account_id   = "example-service-account"
  display_name = "Example Service Account"
}

resource "google_service_account_key" "example_service_account_key" {
  service_account_id = google_service_account.example_service_account.name
}

output "service_account_email" {
  value = google_service_account.example_service_account.email
}

output "private_key" {
  value = google_service_account_key.example_service_account_key.private_key
}



#######################################################################################################################

pipeline {
    agent any

    environment {
        GCP_PROJECT_ID = "<your-gcp-project-id>"
        GCP_REGION = "<your-gcp-region>"
        SERVICE_ACCOUNT_KEY_CREDENTIAL_ID = "<your-jenkins-credential-id>"
    }

    stages {
        stage('Authenticate with Service Account Key') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${SERVICE_ACCOUNT_KEY_CREDENTIAL_ID}", variable: 'SERVICE_ACCOUNT_KEY_PATH')]) {
                        sh "gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT_KEY_PATH}"
                    }
                }
            }
        }

        stage('Run gcloud Commands') {
            steps {
                script {
                    sh "gcloud config set project ${GCP_PROJECT_ID}"
                    sh "gcloud config set compute/region ${GCP_REGION}"

                    // Add your gcloud commands here using the authenticated service account
                    sh "gcloud compute instances list"
                }
            }
        }
    }

    post {
        always {
            // Clean up or perform any other post-processing steps
            script {
                // Deactivate the service account if needed
                sh "gcloud auth revoke"
            }
        }
    }
}


################################################################################################################################

pipeline {
    agent any

    environment {
        GCP_PROJECT_ID = "<your-gcp-project-id>"
        GCP_REGION = "<your-gcp-region>"
        SERVICE_ACCOUNT_KEY_CREDENTIAL_ID = "SERVICE_ACCOUNT_KEY"
        SERVICE_ACCOUNT_KEY_PATH = sh(script: "echo \$SERVICE_ACCOUNT_KEY", returnStdout: true).trim()
    }

    stages {
        stage('Terraform Apply') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${SERVICE_ACCOUNT_KEY_CREDENTIAL_ID}", variable: 'SERVICE_ACCOUNT_KEY')]) {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve -var="service_account_key_file_path=${SERVICE_ACCOUNT_KEY_PATH}" -var="gcp_project_id=${GCP_PROJECT_ID}" -var="gcp_region=${GCP_REGION}"'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'terraform destroy -auto-approve -var="service_account_key_file_path=${SERVICE_ACCOUNT_KEY_PATH}" -var="gcp_project_id=${GCP_PROJECT_ID}" -var="gcp_region=${GCP_REGION}"'
            }
        }
    }
}

##################################################################################
provider "google" {
  credentials = file(var.service_account_key_file_path)
  project     = var.gcp_project_id
  region      = var.gcp_region
}

# ... rest of your Terraform code
