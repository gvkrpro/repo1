

#!/bin/bash

myParameter="specificWord"

if [ "$myParameter" = "specificWord" ]; then
    # Perform actions when the parameter matches the specific word
    echo "Parameter matches the specific word"
    # Add more commands or actions as needed
fi

#To remove a matching word element from a JSON file that starts with { and ends with }, you can use a shell script with jq and the del() function. Here's an example:

#!/bin/bash

json_file="/path/to/your/json/file.json"
matching_word="example"

# Remove the matching word element from the JSON file
jq "del(.[] | select(. == \"$matching_word\"))" "$json_file" > tmpfile && mv tmpfile "$json_file"

######################################

{
"Serviceaccounts":{
"test": "testing Serviceaccount",
"test1": "testing1 Serviceaccount",
"test2": "testing2 Serviceaccount"
}
}

From above json file code, i want to remove the service account when i pass the input as service account name using shell script
#!/bin/bash

json_file="/path/to/your/json/file.json"
service_account_name="test1"

# Remove the specified service account from the JSON file
jq "del(.Serviceaccounts.\"$service_account_name\")" "$json_file" > tmpfile && mv tmpfile "$json_file"


##############################################
To remove the comma from the last element of the Serviceaccounts object in the given JSON code, you can use a shell script with jq and the to_entries function. Here's an example:

#!/bin/bash

json_file="/path/to/your/json/file.json"

# Remove the comma from the last element of the Serviceaccounts object
jq '.Serviceaccounts |= (to_entries | map(if . == last then .value else . end) | from_entries)' "$json_file" > tmpfile && mv tmpfile "$json_file"

#####################################################
{
"Serviceaccounts":{
"test": "testing Serviceaccount",
"test1": "testing1 Serviceaccount",
"test2": "testing2 Serviceaccount"
}
}

From above json file code, If i pass an Service account name then i want to copy an service account object or element to some other json file which is having different service accounts


#!/bin/bash

source_file="/path/to/source.json"
destination_file="/path/to/destination.json"
service_account_name="test1"

# Copy the service account object to the destination file
jq --arg name "$service_account_name" '.Serviceaccounts | select(.[$name])' "$source_file" |
jq --arg name "$service_account_name" '.serviceaccounts += {($name): .[$name]}' "$destination_file" > tmpfile && mv tmpfile "$destination_file"





##################################################################################################################
Practiced data
================
#For deleting the matching field element
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq 'del(.serviceaccounts.id)' prac1.json
{
  "serviceaccounts": {
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male",
    "status": "active"
  }
}

#if i delete last field then also it is removing the comma for the above field
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq 'del(.serviceaccounts.status)' prac1.json
{
  "serviceaccounts": {
    "id": 3427978,
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male"
  }
}

#For removing the element in the middle
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq 'del(.serviceaccounts.gender)' prac1.json
{
  "serviceaccounts": {
    "id": 3427978,
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "status": "active"
  }
}

#For deleting multiple fields and then prints the remaining data but won't update the original file
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq 'del(.serviceaccounts.gender)' prac1.json | jq 'del(.serviceaccounts.status)'
{
  "serviceaccounts": {
    "id": 3427978,
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example"
  }
}



#For printing the json data
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq '.' prac1.json
{
  "serviceaccounts": {
    "id": 3427978,
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male",
    "status": "active"
  }
}


vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq '.serviceaccounts' prac1.json
{
  "id": 3427978,
  "name": "Siddarth Kocchar DC",
  "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
  "gender": "male",
  "status": "active"
}

vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq '.' prac1.json
{
  "serviceaccounts": {
    "id": 3427978,
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male",
    "status": "active"
  }
}

vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq 'del(.serviceaccounts.id)' prac1.json > prac2.json

vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq . prac2.json
{
  "serviceaccounts": {
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male",
    "status": "active"
  }
}

#For inserting the id field element inside serviceaccounts
vinod@DESKTOP-RBNMFJI MINGW64 /d/test-practice
$ jq --arg id "$(jq -r '.serviceaccounts.id' "prac1.json")" '.serviceaccounts += { "id": $id }' "prac2.json"
{
  "serviceaccounts": {
    "name": "Siddarth Kocchar DC",
    "email": "siddarth_dc_kocchar@bartoletti-hyatt.example",
    "gender": "male",
    "status": "active",
    "id": "3427978"
  }
}


